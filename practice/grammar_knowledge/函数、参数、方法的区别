1. 函数
函数是一段可重用的代码块，用于实现特定的功能。它可以接受输入（即参数），执行一系列操作，并返回结果。
定义方式： 使用 def 关键字创建一个新的函数。
def multiply(a, b):
return a * b
调用方式： 提供必要的参数即可调用函数。
result = multiply(3, 4)
print(result) # 输出: 12
特点：
函数是一个独立存在的实体4。
它可以接收零个或多个参数作为输入。
返回值可以通过 return 明确给出，如果没有指定则默认为 None。

2. 参数
参数是函数定义的一部分，用来描述函数期望接收的输入数据。根据其用途和传递方式的不同，参数可以分为以下几类：
(A) 位置参数
按照顺序匹配的形式参数与实际参数之间的绑定关系。
def greet(name, greeting="Hello"):
return f"{greeting}, {name}!"
result = greet("Alice", "Hi") # Hi, Alice!
此例子展示了如何利用位置参数来控制函数的行为1。

(B) 关键字参数
通过显式指定名称来分配值给相应的形式参数。
def describe_pet(animal_type, pet_name):
print(f"I have a {animal_type}. Its name is {pet_name}.")
describe_pet(pet_name='Willie', animal_type='dog')
这种方法提高了代码的可读性并提供了更大的灵活性1。

默认值参数
当某些参数未被提供时，使用预设的缺省值。
def make_pizza(size=12, toppings=None):
if not toppings:
toppings = []
message = f"Pizza size:{size}\nToppings:"
for topping in toppings:
message += "\n-" + str(topping)
return message
print(make_pizza()) # 默认披萨大小为12英寸，无配料
这种机制简化了常见情况下的调用流程。

(D) 可变长度参数
允许传入任意数量的位置参数或关键字参数。
单星号 (*) 将多余的参数打包成元组；
双星号 (**) 则将多余的关键字参数打包成字典。
# *args 示例
def sum_all(*numbers):
total = 0
for num in numbers:
total += num
return total
print(sum_all(1, 2, 3)) # 输出: 6

# **kwargs 示例
def show_info(**info):
for key, value in info.items():
print(f"{key}: {value}")
show_info(Name="John Doe", Age=30)
这两种技术扩展了函数适应复杂需求的能力。

3. 方法
方法类似于函数，但它是属于某个类或对象的操作接口。它总是与一个具体的对象实例相关联。
#方法本质上也是函数的一种表现形态，但它总是依附于某一特定类实例之上运作。换句话说，方法是由对象所拥有并通过该对象访问的一系列行为指令集合。
定义方式： 在类内部定义的方法会自动接收第一个隐含参数——通常是名为 self 的变量，代表当前调用该方法的对象实例。

class Circle:
pi = 3.14
def __init__(self, radius):
self.radius = radius
def area(self):
return self.pi * (self.radius ** 2)
circle_instance = Circle(7)
print(circle_instance.area()) # 输出圆面积约为 153.86
调用方式：
经由所属对象触发相应动作链路完成整个过程。

class Rectangle:
def __init__(self, width, height):
self.width = width
self.height = height
def area(self):
return self.width * self.height
rect_instance = Rectangle(5, 3)
print(rect_instance.area()) # 输出矩形面积为15

调用方式： 方法必须通过所属对象进行调用。
another_rect = Rectangle(4, 2).area()
print(another_rect) # 输出8

特点：
方法始终隶属于某类或其实例之下,不能脱离上下文单独存在3。
自动获取附加信息（如状态更新反馈）等功能特性使其更适合面向对象编程模式。
总结对比表
特征/术语函数参数方法定义独立单元形参列表对象专属调用主体直接调用配合函数一起实例调用数据依赖程度较低构建桥梁作用密切相关
通过对这三个基本要素深入剖析之后可以看出它们虽各有侧重却也彼此联系紧密，在实际开发过程中往往需要综合运用才能达到最佳效果。