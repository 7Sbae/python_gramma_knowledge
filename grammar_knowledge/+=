一、定义
+=是Python的复合赋值运算符,功能为“先执行加法运算,再将结果赋值给左侧变量”。其数学表达式可写为:
a=a+b⇒a+=b         a=a+b⇒a+=b
该操作符支持数字、字符串、列表等数据类型。

二、核心用法
1、数字类型
对整数/浮点数执行数学加法：
x = 5
x += 3  # 等价于 x = x + 3
print(x)  # 输出8
  
2、字符串类型
实现字符串拼接（注意字符串为不可变对象）：
s = "Hello"
s += " World"  # 创建新字符串对象
print(s)  # 输出"Hello World"

3、列表类型
对可变对象执行原地修改（关键特性）：
lst = [1,2]
lst += [3]  # 等价于 lst.extend([3])
print(lst)  # 输出[1,2,3]
  
三、+=与a = a + b的本质区别
操作	底层方法	对象修改方式	内存影响
a += b	__iadd__	原地修改（可变对象）	不创建新对象
a = a + b	__add__	创建新对象	可能改变对象引用
示例对比：
# 列表操作对比
a = [1,2]
b = a
a += [3]    # 修改原列表，b随之改变
print(b)    # 输出[1,2,3]

a = [1,2]
b = a
a = a + [3] # 创建新列表，b保持原值
print(b)    # 输出[1,2]
  
四、注意事项
1、不可变对象的伪原地操作
虽然对数字/字符串使用+=在语法上看似原地操作，但实际上会创建新对象：
s = "Py"
print(id(s))  # 输出原地址
s += "thon"
print(id(s))  # 输出新地址
  
2、运算符重载特性
自定义类可通过实现__iadd__方法定义+=行为：
class Vector:
    def __iadd__(self, other):
        self.x += other.x
        return self
  
五、典型应用场景
循环计数器:count += 1替代i++1
数据聚合:total += item_price
动态构建列表:result += new_data

