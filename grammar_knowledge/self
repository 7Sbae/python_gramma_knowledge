一、定义
self是Python类中实例方法的第一个参数,用于指向类的实例对象本身。它是Python面向对象编程的语法约定,需在定义实例方法时显式声明,例如:
class MyClass:
    def my_method(self, arg1):
        # 方法体
虽然名称可以任意修改(如this),但约定俗成使用self以提高代码可读性1。

二、作用
1、访问实例属性和方法
·通过self可操作实例的属性和方法。例如在构造方法__init__中初始化实例变量:
class Person:
    def __init__(self, x, y):
        self.x = x  # 绑定实例变量x
        self.y = y  # 绑定实例变量y
  
·调用其他实例方法时需使用self:
def add(self):
    return self.x + self.y  # 访问实例变量
  
2、区分局部变量与实例变量
若未通过self声明变量,则其仅为局部变量,不会绑定到实例:
def error_method(self):
    z = 10  # 局部变量，实例无法访问
def correct_method(self):
    self.z = 10  # 实例变量
  
3、支持链式调用
通过self返回实例对象本身,可实现链式调用:
class Calculator:
    def set_value(self, value):
        self.value = value
        return self  # 返回实例本身
calc = Calculator().set_value(5).set_value(10)
  
三、与其他语言的对比
C++/Java:通过隐式的this指针或关键字访问当前对象,无需显式声明。
Python:需显式声明self,但传递过程由解释器自动完成，调用方法时无需手动传入。

四、常见误区
忘记声明self参数:会导致调用时抛出TypeError(缺少参数)。
混淆类变量与实例变量：直接通过类名修改的变量是类变量,而self.var是实例变量。
class Dog:
    def __init__(self, name):
        self.name = name  # 实例变量初始化
    
    def bark(self):
        print(f"{self.name} is barking!")  # 通过self访问实例变量
    
    def run(self):
        self.bark()  # 调用其他实例方法
        print("Running...")

dog = Dog("Buddy")
dog.run()