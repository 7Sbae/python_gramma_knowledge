1. LIST.REVERSE() 方法
list.reverse() 是列表对象的一个内置方法，用于就地反转列表中的元素顺序。这意味着原列表会被修改，而不会返回新的列表。
语法：
list.reverse()

特点：
不需要额外的空间来存储新列表。
修改的是原始列表本身。
时间复杂度为 O(n)，其中 n 是列表的长度。

下面展示了一个简单的例子，演示如何使用 list.reverse() 来反转列表。
data = [6, 2, 3, 5, 4]
data.reverse() # 就地反转列表
print(data) # 输出: [4, 5, 3, 2, 6]

2. 部分列表的反转
如果只需要反转列表的部分子集，则可以通过切片操作提取目标范围内的元素，并对其应用 reverse() 方法后再重新拼接回原列表。
下面的例子展示了如何仅对列表中索引 [1:4] 的元素进行反转。
data = [6, 2, 3, 5, 4]
# 提取并反转子列表
reverse_list = data[1:4]
reverse_list.reverse()
# 拼接回原列表
new_list = data[:1] + reverse_list + data[4:]
print(new_list) # 输出: [6, 5, 3, 2, 4]

3. REVERSED() 函数
除了list.reverse() 方法外,Python 还提供了一个全局函数 reversed()，它可以返回一个反向迭代器，而不是直接修改原列表。
语法：
reversed_sequence = reversed(sequence)

特点：
不改变原序列的内容。
返回的是一个反向迭代器，通常需要用 list() 或其他容器将其转为具体的数据结构。

下面的例子比较了 list.reverse() 和 reversed() 的不同之处。
original_data = [6, 2, 3, 5, 4]
# 使用 reversed() 创建反向迭代器
reversed_iterator = reversed(original_data)
# 转换为列表查看结果
reversed_list = list(reversed_iterator)
print(reversed_list) # 输出: [4, 5, 3, 2, 6]
# 原始列表保持不变
print(original_data) # 输出: [6, 2, 3, 5, 4]

4. 注意事项
如果尝试对不可变类型的对象（如元组）调用 .reverse() 方法,将会引发错误,因为只有可变类型才支持就地修改2。
当处理大型数据集合时，优先考虑使用 reversed()，因为它不涉及内存复制，效率更高。
总结表格
功能list.reverse()reversed()是否修改原列表是否返回值None反向迭代器应用场景需要永久更改列表顺序的情况需要临时访问逆序数据而不影响原列表