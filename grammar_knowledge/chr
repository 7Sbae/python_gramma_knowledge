1. 基本定义与功能
chr() 是 Python 的内置函数之一，其主要功能是将一个整数(表示 Unicode 码位)转换为对应的字符1。该函数接受一个参数,返回值是一个单字符字符串。

2. 参数范围与异常处理
chr() 的输入参数必须位于 [0, 1114111] 范围内（即 Unicode 字符集的最大码位）。如果超出此范围，则会抛出 ValueError 异常2。           
try:
    print(chr(-1))  # 错误示例：负数不在有效范围内
except ValueError as e:
    print("Error:", e)

try:
    print(chr(1114112))  # 错误示例：超过最大码位
except ValueError as e:
    print("Error:", e)
   
3. 示例代码
以下是几个常见的使用案例：
(1) 将 ASCII 码转为对应字符             
print(chr(65))  # 输出: 'A'
print(chr(97))  # 输出: 'a'
              
(2) 处理特殊字符            
print(chr(8364))  # 输出: '€' （欧元符号）
print(chr(128512))  # 输出: '😊' （笑脸表情）
              
(3) 结合循环生成一系列字符             
for i in range(65, 70):  # A 到 E 的 ASCII 码
    print(chr(i), end=" ")  # 输出: A B C D E
              
4. 与其他函数的关系
chr() 和 ord() 是互逆的操作。ord() 接受一个字符并返回其 Unicode 码位，而 chr() 则完成反向操作。  char = 'A'
code_point = ord(char)  # 获取 'A' 的 Unicode 码位
original_char = chr(code_point)  # 将码位还原为字符
print(original_char)  # 输出: 'A'
              
5. 应用场景
数据解析：当需要解析二进制文件中的字符编码时，可以通过 chr() 将数值解码为可读字符。
国际化支持：在开发多语言应用程序时，可能需要用 chr() 来动态生成特定语言的字符。
教学用途：帮助初学者理解字符与数字之间的映射关系。
6. 记忆策略
为了更好地记住 chr() 的作用，可以采用以下方法：
联想记忆：将 chr 联想为 “character”,从而联想到它用于生成字符的功能。
对比记忆：将其与 ord() 进行比较,强化两者的区别和联系2。